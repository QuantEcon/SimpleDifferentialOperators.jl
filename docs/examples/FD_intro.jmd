```julia
using SimpleDifferentialOperators,Plots, LinearAlgebra
```

## Gentle Introduction to Upwind Finite Differences

This notebook is a brief tutorial on upwind finite difference method for solving
linear ordinary differential equations.

In particular, this tutorial will be motivated by the following problem. Consider payoffs
$u(x)$ for a stochastic process $x\in [0.2,04]$ with infitesimal generate $\mathcal{L}_x$
discounted at rate $\rho > 0$. Then the payoffs can be valued by the
Bellman equation:

$$
\begin{equation}
  \rho v(x) = u(x) + \mathcal{L}_x v(x)
\end{equation}
$$

We will consider the example $\mathcal{L}_x \equiv \mu \partial_x + \frac{\sigma^2}{2}\partial_{xx}$
where $\mu = -0.1$ and $\sigma = 0.1$. We will consider $u(x) = \log(x)$ and we will impose the boundary
conditions that $v'(0.2) = v'(0.4) = 0$.

We will begin by first discretizing the interval $[0.2,0.4]$. Define $x = \{0.2, 0.3, 0.4\}$. Additionally,
we will require the extended grid $\bar{x} = \{0.1,0.2,0.3,0.4,0.5\}$ in order to compute $\partial_x v(x)$ and
$\partial_{xx}v(x)$ at the original boundaries $0.2$ and $0.4$.

First, we will discretize $v'(x_i)$ for each $x_i\in x$.

Note that by forward difference, for an arbitrary $x$ and $\Delta$:

$$
\begin{equation}
  v'(x) \approx \frac{v(x+\Delta)-v(x)}{\Delta}
\end{equation}
$$

Additionally, by backward difference,

$$
\begin{equation}
  v'(x) \approx \frac{v(x)-v(x-\Delta)}{\Delta}
\end{equation}
$$

Since in the stochastic process for $x$ the drift $\mu = -0.1 < 0$, we will
approximate $v'(x)$ by the backward difference. In our instance, the grid $x$ has
uniformly spaced grid points, so $\Delta = 0.1$ for each $x_i\in x$.

So it follows that:

$$
\begin{equation}
  v'(0.2) = 0 \text{ by the reflecting boundary condition}
\end{equation}
$$

$$
\begin{equation}
  v'(0.3) \approx \frac{v(0.3)-v(0.2)}{0.1}
\end{equation}
$$

$$
\begin{equation}
  v'(0.4) \approx \frac{v(0.4)-v(0.3)}{0.1}
\end{equation}
$$

The above equations give us a linear system and hence we can represent them as follows:

$$
\begin{equation}
  \begin{bmatrix}
    v'(0.2) \\
    v'(0.3) \\
    v'(0.4) \\
  \end{bmatrix}
  \approx
  \frac{1}{0.1}
  \begin{bmatrix}
    0 & 0 & 0 \\
    -1 & 1 & 0 \\
    0 & -1 & 1 \\
  \end{bmatrix}
  \begin{bmatrix}
    v(0.2) \\
    v(0.3) \\
    v(0.4) \\
  \end{bmatrix}
\end{equation}
$$

Additionally, we will define $L_{1-}$ to be:

$$
\begin{equation}
  L_{1-} = \frac{1}{0.1}
  \begin{bmatrix}
    0 & 0 & 0 \\
    -1 & 1 & 0 \\
    0 & -1 & 1 \\
  \end{bmatrix}
\end{equation}
$$

```julia

L_1m = 10*[0 0 0; -1 1 0; 0 -1 1]

```

(Note, a similar derivation using the forward differences would yield an analagous
matrix $L_{1+}$)

In a similar manner, we will discretize $v''(x_i)$ for each $x_i \in x = \{0.2,0.3, 0.4\}$.

Note, by central difference, for arbitrary $x$ and $\Delta$:

$$
\begin{equation}
  v''(x) \approx \frac{v(x+\Delta)-2v(x) + v(x-\Delta)}{\Delta^2}
\end{equation}
$$

So it follows that:

$$
\begin{equation}
  v''(0.2) \approx \frac{v(0.3)-2v(0.2) + v(0.1)}{0.1^2}
\end{equation}
$$

Note that by the boundary conditions and backward difference:

$$
\begin{equation}
0 = v'(0.2) \approx \frac{v(0.2)-v(0.1)}{0.1}
\end{equation}
$$

which implies that $v(0.2) = v(0.1)$.

Therefore,

$$
\begin{equation}
  v''(0.2) \approx \frac{v(0.3)-v(0.2)}{0.1^2}
\end{equation}
$$

Then $0.3$:

$$
\begin{equation}
  v''(0.3) \approx \frac{v(0.4)-2v(0.3) + v(0.2)}{0.1^2}
\end{equation}
$$

For $0.4$:

$$
\begin{equation}
  v''(0.4) \approx \frac{v(0.5)-2v(0.4) + v(0.3)}{0.1^2}
\end{equation}
$$

Note that by the boundary conditions and forward difference:

$$
\begin{equation}
0 = v'(0.4) \approx \frac{v(0.5)-v(0.4)}{0.1}
\end{equation}
$$

which implies that $v(0.4) = v(0.5)$.

Therefore,

$$
\begin{equation}
  v''(0.4) \approx \frac{-v(0.4) + v(0.3)}{0.1^2}
\end{equation}
$$

The above equations give us a linear system and hence we can represent them as follows:

$$
\begin{equation}
  \begin{bmatrix}
    v''(0.2) \\
    v''(0.3) \\
    v''(0.4) \\
  \end{bmatrix}
  \approx
  \frac{1}{0.1^2}
  \begin{bmatrix}
    -1 & 1 & 0 \\
    1 & -2 & 1 \\
    0 & 1 & -1 \\
  \end{bmatrix}
  \begin{bmatrix}
    v(0.2) \\
    v(0.3) \\
    v(0.4) \\
  \end{bmatrix}
\end{equation}
$$

Additionally, we will define $L_2$ to be:

$$
\begin{equation}
  L_2 = \frac{1}{0.1^2}
  \begin{bmatrix}
    -1 & 1 & 0 \\
    1 & -2 & 1 \\
    0 & 1 & -1 \\
  \end{bmatrix}
\end{equation}
$$

```julia
L_2 = 100*[-1 1 0; 1 -2 1; 0 1 -1]
```

Treating $x= \{0.2,0.3,0.4\}$ as an array $x = [0.2, 0.3, 0.4], then
considering the original Bellman equation, we obtain:

$$
\begin{equation}
  \rho v(x) \approx u(x) +\mu L_{1-}v(x) +\frac{\sigma^2}{2}L_2v(x)
\end{equation}
$$

Which further implies:

$$
\begin{equation}
(\rho I - \mu L_{1-} - \frac{\sigma^2}{2}L_2)v(x) \approx u(x)
\end{equation}
$$

Then setting:

$$
\begin{equation}
L = \rho I - \mu\frac{1}{0.1}L_{1-} - \frac{\sigma^2}{2}L_2
\end{equation}
$$

```julia
x = [0.2, 0.3, 0.4]

function u(x)
    return log(x)
end

ρ = 0.05
μ = -0.1
σ = 0.1

L = I*ρ - μ*L_1m - σ^2 / 2 * L_2
```

We obtain the linear system:

$$
\begin{equation}
Lv(x) \approx u(x)
\end{equation}
$$

And thus we obtain:

$$
\begin{equation}
v(x) \approx L^{-1}u(x)
\end{equation}
$$


```julia
v = L \ u.(x)
```

### Using the SDO Package

We can solve the same problem using the simple differential operators package:

```julia
x̄ = range(0.1, 0.5, length = 5)
x = interiornodes(x̄)

bc = (Reflecting(), Reflecting())
L = I * ρ - μ*L₁₋(x̄, bc) - σ^2 / 2 * L₂(x̄, bc)

v_SDO = L \ u.(x)
```

# Motivating Example

This notebook is a gentle introduction to finite difference along with demonstrating the application of SimpleDifferntialOperators.jl package.

As a simple example, let

- $x\in [0.2, 0.4]$ be a state variable on a domain following the SDE

$$
\begin{equation}
  dx_t = \mu dx_t + \sigma W_t
\end{equation}
$$

where the variable $x_t$ is reflected at $x_{\text{min}} = 0.2$ and $x_{\text{max}}=0.4$. Let $\mu = -0.1$ and $\sigma = 0.01$.

- The payoffs for state $x$ are a function $\widetilde{f}(x)$ defined on the domain $[0.2, 0.4]$. For this particular example, let $\widetilde{f}(x) = log(x)$

- $\widetilde{v}(x)$ is the value of the stream of payoffs discounted at rate $r=0.05$

```julia

µ = -0.1
σ = 0.01
r = 0.05

function f(x)
    return log(x)
end

```

Then, through standard arguments, the stationary Bellman equation along with boundary conditions is

$$
\begin{align}
  r\widetilde{v}(x) &= \widetilde{f}(x) + \mu\partial_x\widetilde{v}(x) + \frac{\sigma^2}{2}\partial_{xx}\widetilde{v}(x) \\
  \partial_x\tilde{v}(0.2) &= 0 \\
  \partial_x\tilde{v}(0.4) &= 0
\end{align}
$$

Mapping to the notation of (derivation document ...)

$$
\begin{align}
\tilde{L} &\equiv r - \mu\partial_x - \frac{\sigma^2}{2}\partial_{xx} \\
\tilde{B} & \equiv \begin{bmatrix}
  \partial_x\lvert_{x=0.2} \\
  \partial_x\lvert_{x=0.4} \\
  \end{bmatrix} \\
b &\equiv \begin{bmatrix}
0 \\
0 \\
\end{bmatrix}
\end{align}
$$

We will solve for $\widetilde{v}(x)$ on the domain by the use of finite difference. We will discretize the domain $[0.2, 0.4]$ using a finite size of $\Delta = 0.1$, and hence let $x = [0.2, 0.3, 0.4]^T$ will employ $\bar{x} = [0.1, 0.2, 0.3, 0.4, 0.5]^T$. Likewise,
we will solve for $v \equiv \{\widetilde{v}(x_i)\}_{i=1}^3$ and will employ $\bar{v} \equiv \{\widetilde{v}(x_i)\}_{i=0}^4$. $x_0 = 0.1, x_1 = 0.2, \ldots, x_4 = 0.5$.

```julia

x̄ = range(0.1, 0.5, length = (5)) # extended grid
x = interiornodes(x̄) # interior grid

```

Next, we will derive the stencils for the discretized $3\times 5$ operators. $L_{1-}$ (due to downdrift), $I$, $L_2$.

# First Derivative Operators

To discretize the $\widetilde{L}_1$ operators we can use a backward difference approximation

$$
\begin{equation}
\widetilde{L}_1\widetilde{v}(x_i) = \partial_x\widetilde{v}(x_i)\approx \frac{\bar{v}_i-\bar{v}_{i-1}}{\Delta}, \text{ for } i=1,\ldots, 3
\end{equation}
$$

And with forward differences

$$
\begin{equation}
\widetilde{L}_1\widetilde{v}(x_i) = \partial_x\widetilde{v}(x_i)\approx \frac{\bar{v}_{i+1}-\bar{v}_{i}}{\Delta}, \text{ for } i=1,\ldots, 3
\end{equation}
$$

In order to calculate the derivaters for all $i=1,\ldots, 3$ (i.e. in the interior) we can stack these up and apply to the extension $\bar{v}$

$$
\begin{equation}
\{\partial_x\widetilde{v}(x_i)\}_{i=1}^3 \approx L_{1-}\cdot \bar{v}
\end{equation}
$$

or,

$$
\begin{equation}
\{\partial_x\widetilde{v}(x_i)\}_{i=1}^3 \approx L_{1+}\cdot \bar{v}
\end{equation}
$$

Where we define $L_{1-}$ from applying to the $\bar{v}$ vectors for all $i=1,\ldots, 3$

$$
\begin{equation}
L_{1-} = \frac{1}{\Delta}\begin{bmatrix}
  -1 & 1 & 0 & 0 & 0 \\
  0 & -1 & 1 & 0 & 0 \\
  0 & 0 & -1 & 1 & 0
  \end{bmatrix}
  \end{equation}
  $$

And similarly define $L_{1+}$ from applying to the $\bar{v}$ vector for all $i=1,\ldots, 3$

$$
\begin{equation}
L_{1+} = \frac{1}{\Delta}\begin{bmatrix}
  0 & -1 & 1 & 0 & 0 \\
  0 & 0 & -1 & 1 & 0 \\
  0 & 0 & 0 & -1 & 1
  \end{bmatrix}
  \end{equation}
  $$

  Since $\mu < 0$, we will only utilize the downdrift and hence only $L_{1-}$

```julia

L_1m = 1/0.1*[-1 1 0 0 0; 0 -1 1 0 0; 0 0 -1 1 0]

```

# Second Derivative Operators

To discretize the $\widetilde{L}_2$ second order operator, we can use central differences

$$
\begin{equation}
\widetilde{L}_2\widetilde{v}(x_i) \equiv \partial_{xx}\widetilde{v}(x_i)\approx \frac{\bar{v}_{i+1}-2\bar{v}_i\bar{v}_{i-1}}{\Delta^2} \text{ for } i=1,\ldots, 3
\end{equation}
$$

In order to calculate the derivatives for all $i=1, \ldots, 3$ (i.e the interior) we can stack these up and aplly to the extension $\bar{v}$

$$
\begin{equation}
\{\partial_{xx}\widetilde{v}(x_i)\}_{i=1}^3 \approx L_{2}\cdot \bar{v}
\end{equation}
$$

Where we define $L_2$ from applying to the $\bar{v}$ vector for all $i=1,\ldots 3$,

$$
\begin{equation}
L_{2} = \frac{1}{\Delta^2}\begin{bmatrix}
  1 & -2 & 1 & 0 & 0 \\
  0 & 1 & -2 & 1 & 0 \\
  0 & 0 & 1 & -2 & 1
  \end{bmatrix}
  \end{equation}
  $$

```julia

L_2 = 1/0.1^2*[1 -2 1 0 0 ; 0 1 -2 1 0; 0 0 1 -2 1 ]

```

  Additionally, we will require the identity operator for compositions. For simplicity, define the identity operator as the 0-th
  order operator $\widetilde{L}_0\equiv I$ so that $\widetilde{L}_0\widetilde{v}(x) = \widetilde{v}(x)$.

  With this, the operator applied to the $\bar{v}$ vector is trivial

  $$
  \begin{equation}
  \widetilde{L}_0\widetilde{v}(x_i) \equiv \widetilde{v}(x_i) = \bar{v}_i, \text{ for } i = 1,\ldots, 3
  \end{equation}
  $$

  And stacking it up for all $i=1,\ldots 3$

  $$
  \begin{equation}
    \{\widetilde{v}(x_i)\}_{i=1}^3 \approx L_0\cdot \bar{v}
  \end{equation}
  $$

  Where

  $$
  \begin{equation}
  L_{0} = \begin{bmatrix}
    0 & 1 & 0 & 0 & 0 \\
    0 & 0 & 1 & 0 & 0 \\
    0 & 0 & 0 & 1 & 0
    \end{bmatrix}
    \end{equation}
    $$

```julia

L_0 = [0 1 0 0 0 ; 0 0 1 0 0; 0 0 0 1 0]

```

  Now that we have the operators, we can compose them together to create the complete differential operator for dthe diffusion process $L$

$$
\begin{equation}
  L = rL_0 - \mu L_{1-} - \frac{σ^2}{2}L_2
\end{equation}
$$

```julia

L = r*L_0 - µ*L_1m - σ^2/2*L_2

```

    $$
    \begin{equation}
    L = \begin{bmatrix}
      0 & 1 & 0 & 0 & 0 \\
      0 & 0 & 1 & 0 & 0 \\
      0 & 0 & 0 & 1 & 0
      \end{bmatrix}
      \end{equation}
      $$



# Boundary Conditions

We will additionally derive the stencil for the boundary operator $B$

Given the reflecting boundary conditions, using forward difference and backward differences

$$
\begin{equation}
0 = \partial_xv(x_4) \approx \frac{v(x_4)-v(x_3)}{\Delta}
\end{equation}
$$

and

$$
\begin{equation}
0 = \partial_xv(x_1) \approx \frac{v(0.1)-v(0.0)}{\Delta}
\end{equation}
$$

which imply that $v(x_1) = v(x_0)$ and that $v(x_4) = v(x_3)$

Stacking the two conditions above, it follows that

$$
\begin{equation}
B = \begin{bmatrix}
  -1 & 1 & 0 & 0 & 0 \\
  0 & 0 & 0 & -1 & 1
  \end{bmatrix}
\end{equation}
$$

```julia

B = [-1 1 0 0 0; 0 0 0 -1 1]

```

#Putting it Together

Then we can stack the operators and affine terms and obtain the system

$$
\begin{equation}
LB\bar{v} =
\begin{bmatrix}
L \\
B
\end{bmatrix}\bar{v} =
\begin{bmatrix}
f \\
b
\end{bmatrix}
\end{equation}
$$

Solving the above system as an inverse problem for $\bar{v}$, we can then extract the interior nodes $\bar{v}$ in order to obtain $\{\widetilde{v}(x_i)\}_{i=1}^3.

```julia

LB = vcat(L, B)

b = [0; 0]

ab = vcat(f.(x), b)

v̄ = LB \ ab

v = interiornodes(v̄)

```

# Applying Boundary Conditions to Operators, the SimpleDifferentialOperators.jl Implementation

Additionally, we could apply the boundary conditions directly to the $L$ operators and solve for the $v$ vector directly as an alternative way of solving the system of $M+2$ equations where we solved for $\bar{v}$ (where in the above example $M=3$).
In fact, this is the exact same implementation that the SimpleDifferentialOperators.jl package utilizes and we will thus utilize the SimpleDifferentialOperators.jl package throughout this derivation.e

Subtracting the first row of $L_{1-}$ by the first of $B$ multiplied by $\Delta^{-1}$ gives, with the corresponding row operation matrix R,

$$
\begin{equation}
RL_{1-} = \frac{1}{\Delta}
\begin{bmatrix}
0 & 0 & 0 & 0 & 0 \\
0 & -1 & 1 & 0  & 0 \\
0 & 0 & -1 & 1 & 0
\end{bmatrix}
\end{equation}
$$

Note that there is no non-zero element in the first and last column for nodes on the boundaries. Hence, solving the corresponding extended system,

$$
\begin{equation}
\begin{bmatrix}
L_{1-} \\
B
\end{bmatrix}
\bar{v} =
\begin{bmatrix}
f \\
b
\end{bmatrix}
\end{equation}
$$

is identical as solving the following system

$$
\begin{align}
R\begin{bmatrix}
L_{1-} \\
B
\end{bmatrix}
\bar{v} &=
R\begin{bmatrix}
f \\
b
\end{bmatrix} \\
&= \begin{bmatrix}
f \\
b
\end{bmatrix}
\end{align}
$$

as $b$ is a zero vector so that the row operations $R$ do not change anything on the right hand side. Furthermore,
 limited to the interior, solving $b$ in the system above is identical as solving the following system with an operator $L^B_{1-}$ on interior nodes:

$$
\begin{equation}
L^{B}_{1-}v=f
\end{equation}
$$

 where we have

$$
\begin{equation}
L^B_{1-} = \frac{1}{\Delta}\begin{bmatrix}
0 & 0 & 0 \\
-1 & 1 & 0 \\
0 & -1 & 1
\end{bmatrix}
\end{equation}
$$

instead of solving the full system without boundary conditions.

```julia

bc = (Reflecting(), Reflecting())
L₁₋(x̄, bc)

```

For the $L_2$ operator, we can add the first row $L_2$ by the first row $B$ multiplied by $\Delta^{-2}$ and subtract the
last row $L_2$ by the second row of $B$ multiplied by $\Delta^{-1}$, we have the following differential operator with the boundary condition $B$ applied for $L_2$

$$
\begin{equation}
L^B_2 = \frac{1}{\Delta^2}
\begin{bmatrix}
-1 & 1 & 0 \\
1 & -2 & 1 \\
0 & -1 & 1
\end{bmatrix}
\end{equation}
$$

```julia

L₂(x̄, bc)

```

Note that for $L_0$ there is no non-zero element in the first and last column for nodes on the boundaries and hence restricting $L_0$ to the interior
columns we obtain the identity matrix $I$.

Thus, setting

$$
\begin{equation}
L^B = rI - \mu L^B_{1-} - \frac{\sigma^2}{2}L^B_2
\end{equation}
$$

we note that solving

$$
\begin{equation}
\begin{bmatrix}
L \\
B
\end{bmatrix}\bar{v} =
\begin{bmatrix}
f \\
b
\end{bmatrix}
\end{equation}
$$

is identical to solving

$$
\begin{equation}
L^Bv = f
\end{equation}
$$

```julia

L = I * ρ - μ*L₁₋(x̄, bc) - σ^2 / 2 * L₂(x̄, bc)

v_SDO = L \ u.(x)

```

We observe that this result is identical as the result obtained from solving the stacked system $LB$ above.
